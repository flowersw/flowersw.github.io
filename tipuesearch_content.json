{"pages":[{"title":"About","text":"I was introduced to programming when I was a Mathematics undergraduate student at UNC -Chapel Hill (~2015). At the time, my perception of the Python programming language was that it was interesting but mainly used in academia, and that it had already had it's \"heyday\". It wasn't until I graduated, learned more, and started working as a programmer that I realized the immensity, and thriving community that the language had. Since then, I've continued to be in awe as I dive deeper and deeper into the rabbit hole (and subsequent rabbit holes) that is programming, software development and testing, and the many applications of it. I'm active in my local and native community of Durham, NC through meetups and workshops, and I have a strong desire to give back. Fun Facts: I'm a \"classically\" trained jazz percussionist. I competed with the ballroom dance team at UNC up and down the East Coast. I once ran through a glass pane without stopping, and came out unscathed. Get in touch if you're working on a project that you think I may be interested in! See my resume for more information about my current and recent employment.","tags":"pages","url":"pages/about/"},{"title":"Projects","text":"A few of the projects that I have interest in and/or am working on: Pipeline - A light-weight generic pipeline framework, written in Python. I plan to implement an Application Checkpointing feature. Hearthstone AI - A framework with which to do deep Reinforcement Learning on the blizzard CGC \"Hearthstone\". It would utilize the Python 3 implementation of the game, Fireplace . The idea would be to use reinforcement learning to create two players, and simulate thousands of games with thousands of combinations of decks. This would allow me to have a peek into what the \"meta\" might look like for a given season. Nerdy, I knowâ€¦ Django-DjMongo - A django app to make the creation of REST API 's easy through a GUI , atop MongoDB. I contributed to this project as an employee at Videntity . Code for Durham - Many of the projects this brigade is working on have interested me, and I have contributed to several of them. Get in touch if you're working on a project that you think I may be interested in!","tags":"pages","url":"pages/projects/"},{"title":"Tipue Search","text":"I recently reconstructed my personal website using Pelican , and I went with a pre-made theme called Flex . This theme is a solid one, but lacked search capability out of the box. Fortunately, there is a Pelican plugin called Tipue Search which integrates the Tipue JQuery plugin into Pelican. Installation into Pelican It's easiest to download all of the pelican plugins. I cloned mine at the same level as my pelican repo. You'll need BeautifulSoup as well. git clone --recursive https://github.com/getpelican/pelican-plugins pip install beautifulsoup4 Then, point to the tipue_search plugin in your pelicanconf.py file: PLUGIN_PATHS = ['path/to/pelican-plugins(can be relative)'] PLUGINS = ['tipue_search'] Installation into your Theme Download tipue and unpack it. Copy the tipuesearch/Tipue Search 6.XX/tipuesearch folder to the static directory of whichever theme you are using. Include the tipuesearch css and search box in your base.html template. In your section, include the tipuesearch css <link rel=\"stylesheet\" href=\" {{ SITEURL }} / {{ THEME_STATIC_DIR }} /tipuesearch/css/tipuesearch.css\"> Put the search box form in wherever you want to put it: <div> <form id= \"search-box\" action= \" {{ SITEURL }} /search.html\" > <input type= \"text\" name= \"q\" id= \"tipue_search_input\" pattern= \".{3,}\" title= \"At least 3 characters\" required placeholder= \"Search\" > </form> <div> Create the search.html page and place it in the templates folder of your theme directory. This is where search results will be displayed, and my version is below. {% extends \"base.html\" %} {% block title %} &ndash; {{ _ ( 'Search Results' ) }}{% endblock %} {% block more_head %} <link href= \"https://fonts.googleapis.com/css?family=Roboto:100,300,400\" > <link rel= \"stylesheet\" href= \" {{ SITEURL }} / {{ THEME_STATIC_DIR }} /tipuesearch/css/normalize.css\" > <script src= \"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\" ></script> <script src= \"\\ {{ SITEURL }} / {{ THEME_STATIC_DIR }} /tipuesearch/tipuesearch_content.js\" ></script> <script src= \"\\ {{ SITEURL }} / {{ THEME_STATIC_DIR }} /tipuesearch/tipuesearch_set.js\" ></script> <script src= \"\\ {{ SITEURL }} / {{ THEME_STATIC_DIR }} /tipuesearch/tipuesearch.min.js\" ></script> {% endblock more_head %} {% block content %} <article> <header> <h1> {{ _ ( 'Search Results' ) }} </h1> </header> <div id= \"tipue_search_content\" ></div> </article> {% endblock content %} {% block additional_js %} <script> $(document).ready(function() { $('#tipue_search_input').tipuesearch({ 'mode' : 'json', 'show': 10, 'newWindow': false, 'wholeWords': false, 'contentLocation': ' {{ SITEURL }} /tipuesearch_content.json' }); }); defer </script> {% endblock additional_js %} Don't forget to add search to your DIRECT_TEMPLATES in your pelicanconf.py DIRECT_TEMPLATES = ['index', 'categories', 'authors', 'archives', 'search'] Feel free to customize the way the search box looks. I added rounded edges by setting border-radius: 15px; on the #tipue_search_input element in the tipuesearch.css file. Enjoy fast, accurate search with Tipue !","tags":"Programming","url":"posts/programming/2017/Aug/15/tipue-search/"}]}